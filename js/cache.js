// Generated by CoffeeScript 1.3.1
(function() {
  var CRLF, cache, key_heap;

  key_heap = require('./heap');

  CRLF = "\r\n";

  cache = {
    storage: {},
    settings: {},
    init: function(settings) {
      var k;
      for (k in settings || {}) {
        this.settings[k] = settings[k];
      }
      return this.settings.max_memory *= 1024 * 1024;
    },
    get: function(key) {
      if (this.storage[key]) {
        if (this.storage[key].exptime === 0 || this.storage[key].exptime >= Date.now()) {
          return "VALUE " + key + " " + this.storage[key].flags + " " + this.storage[key].size + CRLF + this.storage[key].value + CRLF + "END";
        } else {
          console.info("EXPIRED!" + this.storage[key].exptime);
          delete this.storage[key];
        }
      }
      return "END";
    },
    clearCache: function() {
      ({
        storage: {}
      });
      return key_heap.clear();
    },
    set: function(command) {
      var data, exptime, flags, key, params, separator, size;
      separator = command.indexOf(CRLF);
      params = command.substring(0, separator).trim().split(" ");
      key = params[0];
      flags = params[1];
      exptime = Number(params[2]);
      size = Number(params[3]);
      data = command.substring(separator).trim();
      if (size && data && data.length !== size) {
        console.info(command);
        return "CLIENT_ERROR Wrong size expecting: " + size + "	received:" + data.length;
      }
      this.storage[key] = {
        flags: flags,
        exptime: this.calcExpTime(exptime),
        size: size,
        value: data
      };
      key_heap.insert(key, this.storage[key].exptime);
      while (process.memoryUsage().rss > this.settings.max_memory) {
        console.info("memory limit reached, cleaning");
        delete this.storage[key_heap.extract()];
      }
      return "STORED";
    },
    calcExpTime: function(exptime) {
      if (exptime === 0) {
        exptime = Number.POSITIVE_INFINITY;
      } else if (exptime <= 2592000) {
        exptime += Date.now();
      }
      return exptime;
    },
    "delete": function(command) {
      var key, params;
      params = command.split(' ');
      key = params[0];
      if (this.storage[key]) {
        delete this.storage[key];
        return "DELETED";
      }
      return "NOT_FOUND";
    },
    dump: function() {
      return console.info(this.storage);
    },
    dispatch: function(cmd) {
      var command, firstSpace;
      cmd = cmd.toString();
      firstSpace = cmd.indexOf(" ");
      command = (firstSpace !== -1 ? cmd.substring(0, firstSpace) : cmd.trim());
      if (this.hasOwnProperty(command) && typeof this[command] === 'function') {
        return this[command].call(this, cmd.substring(firstSpace).trim()) + CRLF;
      } else {
        return "ERROR" + CRLF;
      }
    }
  };

  module.exports = cache;

}).call(this);
